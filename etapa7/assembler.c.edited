#include "assembler.h"

void assembler(tac* complete)
{
	tac* t = 0;
	hashPrintAssembly(outputFile);
	for (t = complete; t; t = t -> next)
	{
		switch (t->type){
		
		    case    TAC_LABEL:      assemblerLabel(t);break;
		    case    TAC_VEC_IDX:    assemblerVectorIndex(t);break;
		    case    TAC_ASS:        assemblerAssign(t);break;
		    case    TAC_READ:       assemblerRead(t);break;
		    case    TAC_PRINT_EXP:  assemblerPrintExpression(t);break;
		    case    TAC_RETURN:     assemblerReturn(t);break;    
		    case    TAC_JFALSE:     assemblerJumpFalse(t);break;
		    case    TAC_JUMP:       assemblerJump(t);break;
		    case    TAC_ADD:        assemblerAdd(t);break;
		    case    TAC_SUB:        assemblerSub(t);break;
		    case    TAC_MUL:        assemblerMul(t);break;
		    case    TAC_DIV:        assemblerDiv(t);break;
		    case    TAC_AND:        assemblerAnd(t);break;
		    case    TAC_OR:         assemblerOr(t);break;
		    case    TAC_LE:         assemblerLe(t);break;
            case    TAC_GE:         assemblerGe(t);break;
            case    TAC_EQ:         assemblerEq(t);break;
            case    TAC_NE:         assemblerNe(t);break;
            case    TAC_BT:         assemblerBt(t);break;
            case    TAC_ST:         assemblerSt(t);break;
            case    TAC_FUNC_START: assemblerFunctionStart(t);break;
            case    TAC_FUNC_END:   assemblerFunctionEnd(t);break;
            case    TAC_FUNC_CALL:  assemblerFunctionCall(t);break;
            case    TAC_VEC_USE:    assemblerVectorUse(t);break;
		    
		    
			/*case TAC_FUNC_START: fprintf(outputFile, ".globl %s\n .type,%s, @function \n%s: \n\tpushl\t%%ebp\\tmovl\t %%esp, %%ebp"
				, t->symbol->text, t->symbol->text,t->symbol->text); break;
			case TAC_FUNC_END:	fprintf(outputFile, "\t popl\t %%ebp \n\t ret\n"); break;
			//case TAC_ASS: 		fprintf(outputFile, "\t movl \t %s, %%eax \n\t movl\t %%eax, ", t->symbol->text, t->symbol->text);
			//case TAC_PRINT_STRING : fprintf(outputFile, "\t
			*/
		}
	} 
}






<<<<<<< .mine
void assemblerLabel(tac* tacNode){
    fprintf(outputFile,"%s:\n",tacNode->result->text);
=======
void assemblerLabel(tac* tacNode){

>>>>>>> .r39
}

void assemblerVectorIndex(tac* tacNode){

}

<<<<<<< .mine
void assemblerAssign(tac* tacNode){
    
=======
void assemblerAssign(tac* tacNode){

>>>>>>> .r39
}

void assemblerRead(tac* tacNode){

}

void assemblerPrintExpression(tac* tacNode){

}

void assemblerReturn(tac* tacNode){

}

void assemblerJumpFalse(tac* tacNode){

}

void assemblerJump(tac* tacNode){

}

void assemblerAdd(tac* tacNode){

}

void assemblerSub(tac* tacNode){

}

void assemblerMul(tac* tacNode){

}

void assemblerDiv(tac* tacNode){

}

void assemblerAnd(tac* tacNode){

}

void assemblerOr(tac* tacNode){

}

void assemblerLe(tac* tacNode){

}

void assemblerGe(tac* tacNode){

}

void assemblerNe(tac* tacNode){

}

void assemblerEq(tac* tacNode){

}

void assemblerBt(tac* tacNode){

}

void assemblerSt(tac* tacNode){

}

void assemblerFunctionStart(tac* tacNode){

}

void assemblerFunctionEnd(tac* tacNode){

}

void assemblerFunctionCall(tac* tacNode){

}

void assemblerVectorUse(tac* tacNode){

}



